# HOME WORK (DOUBLE LINKED LIST)
class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
        self.prev=None
class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None
    def insertAtFirst(self,value):
        newnode=Node(value)
        if self.head == None:
            self.head=newnode
            self.tail=newnode
        else:
            newnode.next=self.head
            self.head.prev=newnode
            self.head=newnode
    def insertAtEnd(self,value):
        newnode=Node(value)
        x=self.tail
        if self.head == None:
            self.head=newnode
            self.tail=newnode
        else:
            self.tail.next=newnode
            newnode.prev=self.tail
            self.tail=newnode
    def insertAtAfter(self,position,value):
        newnode=Node(value)
        temp=self.head
        while temp.value != position:
            temp=temp.next
        if self.tail == None:
            self.head=newnode
            self.tail=newnode
        #elif temp.next==None:
            
        elif self.head.next==None or temp.next==None:
            self.insertAtEnd(value)
        else:
            temp=self.head
            while temp.value != position:
                temp=temp.next
            a=temp.next
            temp.next=newnode
            newnode.prev=temp
            newnode.next=a
            a.prev=newnode
    def deleteAtFirst(self):
        x=self.head
        x=x.next
        self.head=x
        self.head.prev=None
    def deleteAtEnd(self):
        self.tail=self.tail.prev
        self.tail.next=None
    def deleteAtAfter(self,position):
        if self.tail == None:
            pass
        elif self.head.value==position:
            self.deleteAtFirst()
        else:
            p=self.head
            q=p.next
            while q.value != position:
                p=p.next
                q=q.next
            q.next.prev=p
            p.next=q.next
    def Print(self):
        x=self.head
        print("Linked List:")
        while x:
            print(x.value,end=" ")
            x=x.next
    def PrintRev(self):
        z=self.tail
        print("\nReverse list using previous node.")
        while z:
            print(z.value,end=" ")
            z=z.prev
a=LinkedList()
a.insertAtFirst(5)
a.insertAtFirst(7)
a.insertAtEnd(2)
a.insertAtEnd(3)
a.deleteAtFirst()
a.deleteAtEnd()
a.insertAtAfter(5,8)
a.insertAtAfter(5,9)
a.deleteAtAfter(9)
a.insertAtAfter(2,4)
a.Print()
a.PrintRev()